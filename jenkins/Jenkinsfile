node{
    
    stage("Git Clone")
    {
        git branch: 'integration', credentialsId: 'GIT_CREDENTIALS', url: 'https://github.com/airavata-courses/Noodle.git'
    }
	stage('Testing Session Service') {
                        
                sh '''
       
                    sudo apt --assume-yes install maven
                    cd "sessionmanagement"
                    mvn pre-clean
                    mvn compile
                    mvn package
                    
                    '''             
    
    }  
	
	stage('Testing Retrieval Service') {
                        
                sh '''
       
                   sudo apt-get -y install python3-pip
                   sudo apt-get update
                   pip3 --version
                    cd "dataretrieval"
                    pip install virtualenv
                    virtualenv model
                    cd model
                    cp ../requirements.txt ./
                    cp ../test.py ./
                    pip3 install numpy
                    pip3 install --upgrade -r requirements.txt
                    pip3 install boto3
                    python3 test.py
                    
                    '''
             
    
    } 
   
    stage('Testing Processing Service') {
                        
                sh '''
       
                   sudo apt-get -y install python3-pip
                   sudo apt-get update
                   pip3 --version
                    cd "dataprocessing"
                    pip install virtualenv
                    virtualenv model
                    cd model
                    cp ../requirements.txt ./
                    cp ../test.py ./
                    pip3 install numpy
                    pip3 install --upgrade -r requirements.txt
                    pip3 install boto3
                    python3 test.py
                    
                    '''
             
    
    } 
   stage('Testing Modelling Service') {
                        
                sh '''
       
                   sudo apt-get -y install python3-pip
                   sudo apt-get update
                   pip3 --version
                    cd "datamodeling"
                    pip install virtualenv
                    virtualenv model
                    cd model
                    cp ../requirements.txt ./
                    cp ../test.py ./
                    pip3 install numpy
                    pip3 install --upgrade -r requirements.txt
                    pip3 install boto3
                    python3 test.py
                    
                    '''
             
    
    } 
	
	
    stage('Building Docker Image')
    {
			sh "docker-compose build"
              
    }
    stage('Pushing to Docker hub') 
    {
        withCredentials([string(credentialsId: 'DOCKER_HUB_CREDENTIALS', variable: 'DOCKER_HUB_CREDENTIALS')]) {
            sh "docker login docker.io -u nayeemullahbaig -p ${DOCKER_HUB_CREDENTIALS}"
           
        }
             
             sh "docker-compose push"
            
    }
	stage('Deploy app in K8s')
    {
       
        kubernetesDeploy(
            configs: 'kubedeploy/messaging.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/data-retrieveal.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/data-processing.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/data-modelling.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/session-management.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/usermanagement.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        kubernetesDeploy(
            configs: 'kubedeploy/apigateway.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
         kubernetesDeploy(
            configs: 'kubedeploy/frontend.yaml', 
            kubeconfigId: 'KUBERNETES_CLUSTER_CONFIG',
            enableConfigSubstitution: true
        )
        
    }    
    
}