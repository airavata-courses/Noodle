version: '3.3'
services:
  mdb:
    container_name: mdb
    restart: always
    image: postgres:12
    environment:
      - POSTGRES_USER=${USER}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${MDB}
    volumes:
      - ads-data:/var/lib/postgressql/data
    ports:
      - "5435:5432"
    networks:
      - dis_network
  smdb:
    container_name: smdb
    restart: always
    image: postgres:12
    environment:
      - POSTGRES_USER=${USER}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${SMDB}
    volumes:
      - ads-data:/var/lib/postgressql/data
    ports:
      - "5432:5432"
    networks:
      - dis_network
   
  pdb:
    container_name: pdb
    restart: always
    image: postgres:12
    environment:
      - POSTGRES_USER=${USER}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${PDB}
    volumes:
      - ads-data:/var/lib/postgressql/data
    ports:
      - "5434:5432"
    networks:
      - dis_network

  rdb:
    container_name: rdb
    restart: always
    image: postgres:12
    environment:
      - POSTGRES_USER=${USER}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${RDB}
    volumes:
      - ads-data:/var/lib/postgressql/data
    ports:
      - "5433:5432"
    networks:
      - dis_network

  model-image:
    image: nayeemullahbaig/model-image
    container_name: model-image
    build: ./datamodeling
    environment:
      - FLASK_ENV=docker 
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:idontknow.3@mdb/modeldb
    ports:
      - 5003:5001
    volumes:
      - .docker/model-image:/model-image
    depends_on:
      - mdb
      - kafka 
    networks:
      - dis_network

  process-image:
    image: nayeemullahbaig/process-image
    container_name: process-image
    build: ./dataprocessing
    environment:
      - FLASK_ENV=docker 
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:idontknow.3@pdb/processdb
    ports:
      - 5002:5001
    volumes:
      - .docker/process-image:/process-image
    depends_on:
      - pdb
      - kafka
    networks:
      - dis_network
 
  retrieve-image:
    image: nayeemullahbaig/retrieve-image
    container_name: retrieve-image
    build: ./dataretrieval
    environment:
      - FLASK_ENV=docker 
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:idontknow.3@rdb/retrievedb
    ports:
      - 5001:5001
    volumes:
      - .docker/retrieve-image:/retrieve-image
    depends_on:
      - rdb
      - kafka
    networks:
      - dis_network

  session-image:
    image: nayeemullahbaig/session-image
    container_name: session-image
    build: ./sessionmanagement
    ports:
      - 5010:5010
    volumes:
      - .docker/session-image:/session-image
    depends_on:
      - smdb
      - kafka 
    networks:
      - dis_network

  fronted-image:
    image: nayeemullahbaig/frontend-image
    container_name: frontend-image
    build: ./frontend
    ports:
     - "5006:3000"
    volumes:
     - .docker/frontend-image:/frontend-image
    networks:
     - dis_network 

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    hostname: zookeeper
    networks: 
      - dis_network

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    networks:   
      - dis_network
    environment:
      KAFKA_CREATE_TOPICS: "processed-data:1:1,retrieved-data:1:1,data-retrieve:1:1,process-session:1:1,retrieve-session:1:1,model-session:1:1,current-status:1:1" 
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - .docker/kafka-image:/kafka
    depends_on:
      - zookeeper
    
  user-image:
    image: nayeemullahbaig/user-image
    container_name: user-image
    build: ./usermanagement
    ports:
     - "5000:5000"
    volumes:
     - .docker/user-image:/user-image
    depends_on:
     - udb
    networks:
     - dis_network 
  
  apigateway-image:
    image: nayeemullahbaig/apigateway-image
    container_name: apigateway-image
    build: ./apigateway
    ports:
     - "5050:5050"
    volumes:
     - .docker/apigateway-image:/user-image
    depends_on:
     - kafka
     - zookeeper
     - session-image
     - retrieve-image
     - process-image
    networks:
     - dis_network 
  
  udb:
    container_name: udb
    image: mongo
    expose:
      - 27017
    volumes:
      - ./mongo-volume:/data/db
    networks: 
      - dis_network
  

volumes:
    ads-data:
   
networks:
    dis_network: